
#include <iostream>
#include<vector>
#include<list>
#include<queue>
class Graph
{
    
    int V;   
 
    
    std::list<int> *adj;   
public:
    Graph(int V);  
 

    void addEdge(int v, int w); 
 
  
    void BFS(int s); 
    
    void DFS(int s,int visited[]); 
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new std::list<int>[V];
}
void Graph::BFS(int s){
    int visited[V]={0};
    std::queue<int> q;
    q.push(s);
    visited[s]=1;
    
    std::list<int>::iterator i;
    while(!q.empty())
    {   
        int t=q.front();
        std::cout<<t<<"  ";
        q.pop();
     for (i = adj[t].begin(); i != adj[t].end(); ++i)
     {
          if (!visited[*i])
                {
                    visited[*i] = 1;
                    q.push(*i);
                }
     }
    
        
    }
    
    
}
void Graph::DFS(int s,int visited[])
{
    
    std::cout<<s<<"  ";
    visited[s]=1;
     
    std::list<int>::iterator it;
    for(it=adj[s].begin();it!=adj[s].end();it++)
    {
         if (!visited[*it])
            DFS(*it, visited);
    }
    
}
void Graph::addEdge(int s, int d)
{
    adj[s].push_back(d);
    
 //   adj[d].push_back(s);
}
 

int main() 
{ 
     Graph g(5);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    
    g.addEdge(2, 3);
    g.addEdge(3, 4);
 
    std::cout << " Breadth First Traversal "
         << "(starting from vertex 2) \n";
    g.BFS(0);
    std::cout<<"\n-------DFS-------"<<"\n";
    int visited[5]={0};
    g.DFS(0,visited);
  
 
    return 0; 
}
