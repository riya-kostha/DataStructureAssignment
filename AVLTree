
#include<iostream>

typedef struct Node{
    Node *left;
    Node *right;
    int data;
    int height;
    
}node;
int height(node * node)
{
    if(node==NULL)
    return 0;
    else
    return node->height;
}
int max(int a, int b)  
{  
    return (a > b)? a : b;  
}
int getBalance(node *node)  
{  
    if (node== NULL)  
        return 0;  
    return height(node->left) - height(node->right);  
}  
  
node *lefRotate(node* N)
{
    node *y=N->right;
    node* T2=y->left;
    
    y->left=N;
    N->right=T2;
    N->height=max(height(N->left),height(N->right))+1;
    y->height=max(height(y->left),height(y->right))+1;
    return y;
    
}
node *rightRotate(node* N)
{
    node* y=N->left;
    node* T3=y->right;
    
    y->right=N;
    N->left=T3;
      y->height=max(height(y->left),height(y->right))+1;
     N->height=max(height(N->left),height(N->right))+1; 
     return y;
}

node* newnode(int data )
{
    
    Node* node = new Node(); 
    node->data = data;  
    node->left = NULL;  
    node->right = NULL;  
    node->height = 1; 
    return(node);  
}

node* insert(node *root,int key)
{
    if(root==NULL)
    return newnode(key);
    if(key<root->data)
    root->left=insert(root->left,key);
    else if(key>=root->data)
    root->right=insert(root->right,key);
 
 root->height=max(height(root->left),height(root->right))+1;
    int balance = getBalance(root); 
 //R-R case
 if(balance<-1 && key>root->right->data)
    return lefRotate(root);
 //r-l case
 else if(balance<-1&&key<root->right->data)
 {
    root->right = rightRotate(root->right);  
        return lefRotate(root);
 }
 
 //l-l case
 else if(balance>1&& key<root->left->data)
 return rightRotate(root);
 //l-r case
 else if(balance>1&&key>root->left->data)
 {
     root->left =   lefRotate(root->left);  
        return rightRotate(root);  
 }
 
 return root;
}
void PreOrder(node *root)  
{  
    if(root != NULL)  
    {  
       std::cout << root->data << " ";  
        PreOrder(root->left); 
         
        PreOrder(root->right);  
    }  
}
int main()
{
   
    node *root = NULL;  
      
      root = insert(root, 10);  
    root = insert(root, 20);  
    root = insert(root, 30);  
    root = insert(root, 40);  
    root = insert(root, 50);  
    root = insert(root, 25);  
   PreOrder(root);
   return 0;
}
